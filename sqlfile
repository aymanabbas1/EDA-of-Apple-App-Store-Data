CREATE TABLE appleStore_description_combined as
SELECT * FROM appleStore_description1
UNION
SELECT * FROM appleStore_description2
UNION
SELECT * FROM appleStore_description3
UNION
SELECT * FROM appleStore_description4

**EXPLORATORY DATA ANALYSIS**

----check the number of unique apps in both tablesAppleStore
SELECT count(DISTINCT(id)) as UniqueAppIds 
from AppleStore

SELECT count(DISTINCT(id)) as UniqueAppIds 
from AppleStore
---- the numbers are same (7197)

---- check for any missing values in key fields
select count(*) as MissingValues
from AppleStore
where prime_genre is NULL or user_rating is NULL or track_name is NULL
---- wow no missing values

select count(*) as MissingValues
from appleStore_description_combined
where app_desc is NULL
---- no missing values again

----find out number of apps per genre

SELECT prime_genre, count(*) as NumApps
FROM AppleStore
GROUP by prime_genre
order by NumApps desc

---- get an overview of apps ratings
SELECT min(user_rating) as MinRating
SELECT max(user_rating) as MaxRating
SELECT avg(user_rating) as AvgRating
from AppleStore

----determine whether paid apps have higher rating than free apps
SELECT CASE
	when price > 0 then "Paid"
    else "Free" 
    end as App_Type,
    avg(user_rating) as AvgRating
    from AppleStore
    group by App_type
---- paid apps have slightly higher avg ratings 

---- check if apps with more supported languages have higher ratings 
SELECT CASE
	WHEN lang_num < 10 then "<10 language" 
    when lang_num BETWEEN 10 and 30 then "10 - 30 language"
    else ">30 language" 
    end as language_bucket,
    avg(user_rating) as AvgRating
    from AppleStore
    group by language_bucket
    ORDER by AvgRating
    
---- not really its a wrong assumption to be made

---- check genre with lower rating 
SELECT prime_genre, avg(user_rating) as AvgRating 
from AppleStore
GROUP by prime_genre
order by AvgRating ASC
LIMIT 10

---- check if there is correlation between length of description and user rating 
SELECT CASE
	when length(b.app_desc) < 500 then "Short" 
	when length(b.app_desc) BETWEEN 500 and 1000 THEN "Medium" 
    else "Long"
    end as description_lenght_bucket,
    avg(a.user_rating) as AvgRating
    from AppleStore as a
join appleStore_description_combined as b 
where a.id = b.id
group by description_lenght_bucket
order by AvgRating desc
---- longer the description, better the average rating

----check the top rated apps for each genre
SELECT 
prime_genre,
track_name,
user_rating

from 
(
  SELECT 
  prime_genre,
  track_name,
  user_rating,
  RANK() OVER(PARTITION BY prime_genre order by user_rating desc,rating_count_tot desc) as rank 
  from AppleStore) as a
  WHERE a.rank = 1 
  group by prime_genre
  

  
    
    
